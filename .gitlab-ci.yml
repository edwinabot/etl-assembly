---
# .gitlab-ci.yml
#
# GLCI config for the REPO NAME project

##################################  globals  ##################################

variables:
  # Uncomment to enable debug for pipeline:
  # CI_DEBUG_TRACE: "true"

  # The container repository:
  ECR_BASE_NAME: '806182262415.dkr.ecr.us-east-1.amazonaws.com'

  # Image for building Python3:
  ECR_PY3_BUILD: "${ECR_BASE_NAME}/gitlabci-python3-build:latest"

  # Image for publishing images to ECR:
  ECR_PUBLISH: "${ECR_BASE_NAME}/gitlabci-publisher:latest"

  # Image for deploying ECR images to ECS:
  ECR_DEPLOY: "${ECR_BASE_NAME}/gitlabci-deployer:latest"

stages:
  - setup
  - test:pre-build
  - publish:docker
  - deploy


###############################  job templates  ###############################

.common:docker:publish:
  image: "${ECR_PUBLISH}"
  stage: publish:docker
  variables:
    IMAGE_NAME: 'set me to something in ECR!'
    ECR_REPO: "${ECR_BASE_NAME}/${IMAGE_NAME}"
  before_script:
    - echo "## Clearing dangling image cruft";
      docker builder prune --all --force
    - echo "## Authenticating into ECR";
      $(aws ecr get-login --no-include-email --region us-east-1)
    - 'case $CI_COMMIT_REF_SLUG in
        ( "prod" )
            TAG="v$(cat ./app.version)";;
        ( "master" )
            TAG="latest";;
        ( * )
            TAG="${CI_COMMIT_REF_SLUG}";;
      esac'
    - 'echo -e "## TAG: ${TAG}"'
  script:
    - echo "## Building docker image";
      docker build -t "${IMAGE_NAME}" --build-arg GIT_BRANCH=${CI_COMMIT_REF_SLUG} .
    - ID=$(docker images --quiet --filter "reference=${IMAGE_NAME}")
    - CONTAINER_IMAGE="${ECR_BASE_NAME}/${IMAGE_NAME}"
    - echo "## Publishing container image to ECR";
      docker tag "${ID}" "${CONTAINER_IMAGE}:${TAG}";
      docker push "${CONTAINER_IMAGE}:${TAG}"
    - echo "## Clean up local built image";
      docker rmi --force "${ID}"
  needs: ['no-op']

.common:deploy:
  image: "${ECR_DEPLOY}"
  stage: deploy
  before_script:
    - 'case $CI_COMMIT_REF_SLUG in
        ( "prod" )
            TAG="v$(cat ./app.version)";;
        ( "master" )
            TAG="latest";;
        ( * )
            TAG="${CI_COMMIT_REF_SLUG}";;
      esac'
    - 'echo -e "## ENV: ${ENV}\n## TAG: ${TAG}"'
  script:
    # Set PROJECT below to the name of the Fargate Cluster & Service,
    # without the leading "environment-"
    - 'ecs deploy "${ENV^}-PROJECT" "${ENV^}-PROJECT"
        -t "${TAG}"
        --timeout 900'
  when: manual


#################################  pre-build  #################################

# no-op workaround for `needs:`
#
# This job acts as a dependency for all jobs in later stages that do not have
# any "needs" dependencies. Due to GitLab CI limitations (which are being
# worked on), jobs in later stages that do not declare any "needs" will not
# start until all jobs in all previous stages have completed.  Similarly,
# "needs: []" cannot be used, and jobs can only "need" jobs from earlier no
# longer match the actual meaning of the stages.  All jobs with no dependencies
# would need to be in the first stage, regardless of what logical stage they are
# part of.
#
# see https://gitlab.com/gitlab-org/gitlab-ce/issues/65504
# and https://docs.gitlab.com/ee/ci/yaml/#requirements-and-limitations

no-op:
  image: alpine:latest
  stage: setup
  script:
    - echo 'Nothing to see here, move along'


############################  pre-build test stage  ############################

code_quality:
  # Docs: https://git.trustar.co/help/user/project/merge_requests/code_quality.md
  stage: test:pre-build
  after_script:
    # If CQ ended up not generating a report, this'll keep the job from failing:
    - touch gl-code-quality-report.json
  artifacts:
    paths: [gl-code-quality-report.json]

flake8:test:
  stage: test:pre-build
  image: "${ECR_PY3_BUILD}"
  allow_failure: true
  script:
    - flake8

pytest:test:
  stage: test:pre-build
  image: "${ECR_PY3_BUILD}"
  script:
    - pytest

############################  publish:docker stage  ############################

publish:staging:docker:
  extends: .common:docker:publish
  except: [prod]

publish:production:docker:
  extends: .common:docker:publish
  only: [prod]


################################  deploy stage  ################################

staging:deploy:
  variables:
    ENV: staging
  extends: .common:deploy
  environment:
    name: Staging TAXII Server
    # Set PROJECT below to the name of the Service
    url: "http://PROJECT.trustar.${ENV}.services"
  except:
    - prod
  dependencies: ['publish:staging:docker']

production:deploy:
  variables:
    ENV: production
  extends: .common:deploy
  environment:
    name: Production TAXII Server
    # Set PROJECT below to the name of the Service
    url: "https://PROJECT.trustar.co"
  only:
    - prod
  dependencies: ['publish:production:docker']


##################################  includes  ##################################

include:
  # This will run the Code Quality job template included with GitLab, with
  # adjustments made in the `code_quality` job defined above.
  - template: Code-Quality.gitlab-ci.yml
